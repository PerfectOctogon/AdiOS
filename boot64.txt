
kernel/arch/x86_64/boot64.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <long_mode_start>:

.section .text
# .bits 64
long_mode_start:
    # loading null into all data segment registers
    movw %ax, 0
   0:	66 89 04 25 00 00 00 	mov    %ax,0x0
   7:	00 
    movw %ss, %ax
   8:	66 8c d0             	mov    %ss,%ax
    movw %ds, %ax
   b:	66 8c d8             	mov    %ds,%ax
    movw %es, %ax
   e:	66 8c c0             	mov    %es,%ax
    movw %fs, %ax
  11:	66 8c e0             	mov    %fs,%ax
    movw %gs, %ax
  14:	66 8c e8             	mov    %gs,%ax

    # Lets now call the main kernel
    call kernel_main
  17:	e8 00 00 00 00       	call   1c <long_mode_start+0x1c>

    jmp .
  1c:	eb fe                	jmp    1c <long_mode_start+0x1c>

Disassembly of section .rodata:

0000000000000000 <gdt64>:
	...
   c:	00 98 20 00      	add    %bl,0xf0020(%rax)

0000000000000010 <.pointer>:
  10:	0f 00 00             	sldt   (%rax)
  13:	00 00                	add    %al,(%rax)
  15:	00 00                	add    %al,(%rax)
  17:	00 00                	add    %al,(%rax)
	...

Disassembly of section .note.gnu.property:

0000000000000000 <.note.gnu.property>:
   0:	04 00                	add    $0x0,%al
   2:	00 00                	add    %al,(%rax)
   4:	20 00                	and    %al,(%rax)
   6:	00 00                	add    %al,(%rax)
   8:	05 00 00 00 47       	add    $0x47000000,%eax
   d:	4e 55                	rex.WRX push %rbp
   f:	00 02                	add    %al,(%rdx)
  11:	00 01                	add    %al,(%rcx)
  13:	c0 04 00 00          	rolb   $0x0,(%rax,%rax,1)
  17:	00 01                	add    %al,(%rcx)
  19:	00 00                	add    %al,(%rax)
  1b:	00 00                	add    %al,(%rax)
  1d:	00 00                	add    %al,(%rax)
  1f:	00 01                	add    %al,(%rcx)
  21:	00 01                	add    %al,(%rcx)
  23:	c0 04 00 00          	rolb   $0x0,(%rax,%rax,1)
  27:	00 01                	add    %al,(%rcx)
  29:	00 00                	add    %al,(%rax)
  2b:	00 00                	add    %al,(%rax)
  2d:	00 00                	add    %al,(%rax)
	...

Disassembly of section .debug_line:

0000000000000000 <.debug_line>:
    movw %ax, 0
   0:	4e 00 00             	rex.WRX add %r8b,(%rax)
   3:	00 05 00 08 00 2e    	add    %al,0x2e000800(%rip)        # 2e000809 <.pointer+0x2e0007f9>
    movw %ss, %ax
   9:	00 00                	add    %al,(%rax)
    movw %ds, %ax
   b:	00 01                	add    %al,(%rcx)
   d:	01 01                	add    %eax,(%rcx)
    movw %es, %ax
   f:	fb                   	sti
  10:	0e                   	(bad)
    movw %fs, %ax
  11:	0d 00 01 01 01       	or     $0x1010100,%eax
    movw %gs, %ax
  16:	01 00                	add    %eax,(%rax)
    call kernel_main
  18:	00 00                	add    %al,(%rax)
  1a:	01 00                	add    %eax,(%rax)
    jmp .
  1c:	00 01                	add    %al,(%rcx)
  1e:	01 01                	add    %eax,(%rcx)
  20:	1f                   	(bad)
  21:	02 00                	add    (%rax),%al
  23:	00 00                	add    %al,(%rax)
  25:	00 00                	add    %al,(%rax)
  27:	00 00                	add    %al,(%rax)
  29:	00 02                	add    %al,(%rdx)
  2b:	01 1f                	add    %ebx,(%rdi)
  2d:	02 0f                	add    (%rdi),%cl
  2f:	02 00                	add    (%rax),%al
  31:	00 00                	add    %al,(%rax)
  33:	00 01                	add    %al,(%rcx)
  35:	00 00                	add    %al,(%rax)
  37:	00 00                	add    %al,(%rax)
  39:	01 00                	add    %eax,(%rax)
  3b:	09 02                	or     %eax,(%rdx)
	...
  45:	19 83 3d 3d 3d 3d    	sbb    %eax,0x3d3d3d3d(%rbx)
  4b:	3f                   	(bad)
  4c:	5a                   	pop    %rdx
  4d:	02 02                	add    (%rdx),%al
  4f:	00 01                	add    %al,(%rcx)
  51:	01                   	.byte 0x1

Disassembly of section .debug_line_str:

0000000000000000 <.debug_line_str>:
    movw %ax, 0
   0:	2f                   	(bad)
   1:	68 6f 6d 65 2f       	push   $0x2f656d6f
   6:	61                   	(bad)
   7:	64 69 74 68 79 61 2f 	imul   $0x6f442f61,%fs:0x79(%rax,%rbp,2),%esi
   e:	44 6f 
    movw %es, %ax
  10:	63 75 6d             	movsxd 0x6d(%rbp),%esi
    movw %fs, %ax
  13:	65 6e                	outsb  %gs:(%rsi),(%dx)
    movw %gs, %ax
  15:	74 73                	je     8a <.pointer+0x7a>
    call kernel_main
  17:	2f                   	(bad)
  18:	41                   	rex.B
  19:	64 69 4f 53 2f 41 64 	imul   $0x6964412f,%fs:0x53(%rdi),%ecx
  20:	69 
  21:	4f 53                	rex.WRXB push %r11
  23:	2f                   	(bad)
  24:	6b 65 72 6e          	imul   $0x6e,0x72(%rbp),%esp
  28:	65 6c                	gs insb (%dx),%es:(%rdi)
  2a:	00 61 72             	add    %ah,0x72(%rcx)
  2d:	63 68 2f             	movsxd 0x2f(%rax),%ebp
  30:	78 38                	js     6a <.pointer+0x5a>
  32:	36 5f                	ss pop %rdi
  34:	36 34 00             	ss xor $0x0,%al
  37:	62                   	(bad)
  38:	6f                   	outsl  %ds:(%rsi),(%dx)
  39:	6f                   	outsl  %ds:(%rsi),(%dx)
  3a:	74 36                	je     72 <.pointer+0x62>
  3c:	34 2e                	xor    $0x2e,%al
  3e:	53                   	push   %rbx
	...

Disassembly of section .debug_info:

0000000000000000 <.debug_info>:
    movw %ax, 0
   0:	24 00                	and    $0x0,%al
   2:	00 00                	add    %al,(%rax)
   4:	05 00 01 08 00       	add    $0x80100,%eax
    movw %ss, %ax
   9:	00 00                	add    %al,(%rax)
    movw %ds, %ax
   b:	00 01                	add    %al,(%rcx)
	...
    call kernel_main
  19:	1e                   	(bad)
	...
  26:	01                   	.byte 0x1
  27:	80                   	.byte 0x80

Disassembly of section .debug_abbrev:

0000000000000000 <.debug_abbrev>:
    movw %ax, 0
   0:	01 11                	add    %edx,(%rcx)
   2:	00 10                	add    %dl,(%rax)
   4:	17                   	(bad)
   5:	11 01                	adc    %eax,(%rcx)
   7:	12 0f                	adc    (%rdi),%cl
    movw %ss, %ax
   9:	03 0e                	add    (%rsi),%ecx
    movw %ds, %ax
   b:	1b 0e                	sbb    (%rsi),%ecx
   d:	25 0e 13 05 00       	and    $0x5130e,%eax
	...

Disassembly of section .debug_aranges:

0000000000000000 <.debug_aranges>:
    movw %ax, 0
   0:	2c 00                	sub    $0x0,%al
   2:	00 00                	add    %al,(%rax)
   4:	02 00                	add    (%rax),%al
   6:	00 00                	add    %al,(%rax)
    movw %ss, %ax
   8:	00 00                	add    %al,(%rax)
   a:	08 00                	or     %al,(%rax)
	...
    call kernel_main
  18:	1e                   	(bad)
	...

Disassembly of section .debug_str:

0000000000000000 <.debug_str>:
    movw %ax, 0
   0:	61                   	(bad)
   1:	72 63                	jb     66 <.pointer+0x56>
   3:	68 2f 78 38 36       	push   $0x3638782f
    movw %ss, %ax
   8:	5f                   	pop    %rdi
   9:	36 34 2f             	ss xor $0x2f,%al
    movw %ds, %ax
   c:	62                   	(bad)
   d:	6f                   	outsl  %ds:(%rsi),(%dx)
    movw %es, %ax
   e:	6f                   	outsl  %ds:(%rsi),(%dx)
   f:	74 36                	je     47 <.debug_str+0x47>
    movw %fs, %ax
  11:	34 2e                	xor    $0x2e,%al
  13:	53                   	push   %rbx
    movw %gs, %ax
  14:	00 2f                	add    %ch,(%rdi)
  16:	68 6f 6d 65 2f       	push   $0x2f656d6f
    call kernel_main
  1b:	61                   	(bad)
    jmp .
  1c:	64 69 74 68 79 61 2f 	imul   $0x6f442f61,%fs:0x79(%rax,%rbp,2),%esi
  23:	44 6f 
  25:	63 75 6d             	movsxd 0x6d(%rbp),%esi
  28:	65 6e                	outsb  %gs:(%rsi),(%dx)
  2a:	74 73                	je     9f <.pointer+0x8f>
  2c:	2f                   	(bad)
  2d:	41                   	rex.B
  2e:	64 69 4f 53 2f 41 64 	imul   $0x6964412f,%fs:0x53(%rdi),%ecx
  35:	69 
  36:	4f 53                	rex.WRXB push %r11
  38:	2f                   	(bad)
  39:	6b 65 72 6e          	imul   $0x6e,0x72(%rbp),%esp
  3d:	65 6c                	gs insb (%dx),%es:(%rdi)
  3f:	00 47 4e             	add    %al,0x4e(%rdi)
  42:	55                   	push   %rbp
  43:	20 41 53             	and    %al,0x53(%rcx)
  46:	20 32                	and    %dh,(%rdx)
  48:	2e 34 34             	cs xor $0x34,%al
	...
