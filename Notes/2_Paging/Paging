In general purpose bootloaders, kernel is booted in 32-bit. So the 32-bit GDT should already be defined. If we expect the kernel's entry point to be in long mode, the bootloader should have enable paging, and described the 64-bit GDT and started the CPU in 64-bit mode and loaded the kernel in.

A bootloader shouldn't usually do advanced things like setting up paging.

Detecting if long mode is available. We need to check if the CPU is long mode compatible before we try switching over to 64 bits.

CPUID - instruction that lets you identify information about the CPU. Most assembler support typing just the pneomonic.

In order to detect whether CPUID exists, check if we can flip the 22nd youngest CPU flag.

PUSHF pushes CPU flags onto the stack. Need to specify size of flags we are going to push. PUSHFD - push flags as a dword.

BP - base pointer (where stack begins)
SP - stack pointer is the address of the last address that was pushed onto the stack

Initialize these two values so we can use the stack!

mov BP, 0x7C00
MOV SP, BP

We can now pop the flags 

PUSHFD
POP EAX --> Popping a flag into the Extended A register
MOV ECX, EAX --> Store a copy of this flag
XOR EAX, 1 << 21 --> Flipping the 22nd youngest bit from the CPU flags or the 21st flag (index 0)
PUSH EAX --> Push it onto the stack
POPFD --> Pop the flags you pushed into the stack from the EAX and put them into the CPU flags
PUSHFD --> We will be checking if the flag was flipped, so lets pushfd to dump the CPU flags into the stack
POP EAX --> Lets pop the flags into EAX
PUSH ECX --> We don't want to modify the CPU flags like that, so we will push back the original value we copied into ECX
POPFD --> Restore flag

Now, we need to verify if we actually were able to flip that bit
XOR EAX, ECX --> Checking if something is different
JZ Error --> Jump if zero flag is set (cpuid doesn't exist as 21st flag couldn't be flipped)

Now we, know cpuid exists. But we don't know if cpuid extended functionality is supported. 

CPUID uses param and stores it into EAX

0x80000000 - This is where the extended functionality starts

The first instruction tells us if these extended functionalities are even supported

Our hope is that the EAX register somehow gets larger

MOV EAX, 0x80000000 --> move this value into EAX and then we will check if the CPUID makes EAX larger
CPUID
CMP EAX, 0x80000001 --> Checking if EAX got larger
JB ERROR --> If EAX didn't get larger, then extended functionality isn't supported

Now that we've verified extended functionality is supported
MOV EAX, 0x80000001
CPUID --> This will now store various CPU information into the different CPU registers
The one we want is the 30th youngest bit of the EDX register (bit 29). If this bit is 1, long mode is supported
TEST EDX, 1 << 29 --> Test instruction performs AND on the individual bits, in our case the 29th bit. Zero flag will NOT be set
JZ ERROR --> jump to error if zero flag was set

Paging
Virtual memory management. Some of the physical memory (RAM). 

Using physical address, you can take a voltmeter and check for bits. It physically tells you where you can find something in your RAM.

Virtual memory comes with its own virtual addresses. It can have different forms.

We have some virtual address from our virtual memory, but this doesn't actually tell us where this data is found in the RAM. This is fully logical. This is fully virtual. It's for the kernel, programs and whatnot.

Virtual memory might be easier to handle.

Segmentation
The idea of segmentation is that you split memory into segments that are physically found in the RAM. Can be managed in the virtual memory. 

When you run some process in user space, we can have a segment of memory dedicated to that process. If a program tries to access something outside of its segment, you get a segmentation fault.

Another virtual memory management technique is called paging. Paging does the following :
Consider physical memory to be split into equally sized chunks. Frames one after the other
Paging splits virtual memory into equal sized chunks called pages. It's abstract, you cannot even say a page is after an other without it being an abstraction, it doesn't make any physical sense.

Size of the frame is the same as the size of the page.

Page frame allocator. 

Paging allows you to do some things an extra layer of abstraction lets you do
4 bytes of data - standard size of a page

We have two processes P1 and P2 that we want to access with data

So lets say the 4 KB is somewhere physically in RAM. The two processes can access RAM through this page?? The actual frames in memory are different. Allows for an extra layer of security through abstraction.

Some part of the disk is dedicated to storing pages. So pages can also be found in the disk. 

Identity mapping. all virtual addresses will be mapped 1 : 1 to physical address. It still doesn't tell us where it is in physical memory, but can still access it in some way

In our kernel, we're gonna have an address translator that will tell us where it is in physical memory. 
Identity mapping, the virtual address will be the same as the physical address.

Frame buffer is some part of the RAM that can tell the GPU how to draw something. Most virtual machines put the frame buffer at the address 0xFB000000, where FB stands for frame buffer

Usually the physical address can change, but you want the virtual address of the frame buffer to always be the same.

1-level paging
Have a page table. A page table is supposed to be a structure that contains different virtual addresses of the pages. 

2-level paging
Page directory table they are a collection of related pages. Used for managing virtual memory. Points to different page tables. All these tables are usually 4 KB

3-level paging
Page directory pointer table. Table of pointers to the page directory tables. 

4-level paging
Allows for addressing 256 TB of virtual memory. Page map level 4 table. points to page directory pointer tables.

4 level linear paging. Doesn't differ that much from one level paging. 

PML4T -> PDPT -> PDT -> PT

Fundamentally, we only have 1 PT. But we can eventually add more page tables. (PAE paging). Each of these tables take up 4 KB.

PML4T first entry is a pointer to PDPT. Let's put it at 0x1000. The first 4 KB are considered reserved.

PML4T - 0x1000
PML4T[0] -> PDPT
Present flag should be 1, next is read/write flag which has to be 1. Supervisor/ user flag has to be 0 because it has very high permissions -> 011. Right now we don't need to worry about this because we will be executing in supervisor mode(monitor mode)

MOV 0x1000, 0x2003 --> We are pointing to the PDPT with the flags
PDPT - 0x2000
PDPT[0] -> PDT --> We now want the first pointer of the PDPT to point to PDT
MOV 0x2000, 0x3003 --> Move up 4 KB
PDT - 0x3000
PDT[0] -> PT
MOV 0x3000, 0x4003
PT- 0x4000

Now, we just need to fill up our page table. Page table, like all other tables is 4KB

We will now fill up this page table with different virtual addresses. 

PT is split into 8 byte chunks. These will store our 32-bit physical address and therefore, that's how we do the mapping.
We now fill these with the next physical addresses that we want. 

x86 page sizes:
- 4KiB (standard size)
- 2MiB
- 1GiB

PAE paging
Physical address extension. 32-bit physical address = 4GB of memory. This might not be sufficient for users. PAE paging lets us go over this mark. In PAE paging, entries are 8 bytes.

We want to execute this procedure 512 times. The whole page table is 4KB, 1 entry is 8 bytes, so in total 512 times
MOV ECX, 0
IDMAP:
    MOV EAX, 4096 -> Move the page size(4096) to the EAX register. This is how the identity map algo works
    MUL ECX --> address of first page will be 0!
    OR EAX, 10000011b --> The 011 are the flags so we are adding the flags.
    MOV [0x3000+ECX*8], EAX --> Moving it into our page table
    INC ECX
    CMP ECX, 512
    JNE IDMAP

This is a very simple algo to create an identity map

MOV EAX, 0x1000
MOV CR3, EAX

Now the CR3 register knows where PML4T is
Now we can enable the bit that tells the CPU that when paging is enabled, it's PAE paging. 6th youngest bit of CR4 control register 4.

MOV EAX, CR4
OR EAX, 1 << 5 --> Setting 5th bit
MOV CR4, EAX

Now we need to enter long mode!
Register that contains the info about the long mode bit is in model-specific register

RDMSR - Read model specific register
WRMSR - Write model specific register

ECX register contains the id of the model specific register we want to access
EAX contains content

MOV ECX, 0xC0000080 -> This is the model specific register, so let's put this into ECX
RDMSR -> This will now write the register into EAX
OR EAX, 1 << 8 --> 9th youngest bit is responsible for enabling long mode when we enable paging
WRMSR --> Write model specific register!

Now we told the CPU we want PAE paging and long mode

Now, let's enable paging itself
Flip oldest bit in control register 0 CR0
MOV EAX, CR0
OR EAX, 1 << 31
MOV CR0, EAX

Paging is now enabled! Still in compatibility mode. Cannot use 64bit instructions yet

Edit the GDT (Global descriptor table)

We need to modify it because we had a granularity, size, long mode bit, Reserved bit, Limit(4 bits)

Size was set to 1 because we wanted 32 bit protected mode. Long mode was 0. Size needs to now be 0, and long mode bit has to be 1.

MOV [CODEDESCRIPTOR + 5], BYTE 10101111b
MOV [DATADESCRIPTOR + 5], BYTE 10101111b

JMP 8:LM

[bits 64]

LM:
    JMP LM

Now we're in long mode